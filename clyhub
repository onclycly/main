
--- VARIABLES

getgenv().SunaStack = false
getgenv().NoClip = false

--- FUNCTIONS

-- TELEPORT

function TeleportIsland(Island,Speed)
	spawn (function ()
		local tween_s = game:GetService('TweenService')
		local tweeninfo = TweenInfo.new(Speed,Enum.EasingStyle.Linear)
		
		local lp = game.Players.LocalPlayer
		
		function bypass_teleport(v)
			if lp.Character and 
			lp.Character:FindFirstChild('HumanoidRootPart') then
				local cf = CFrame.new(v)
				local a = tween_s:Create(lp.Character.HumanoidRootPart,tweeninfo,{CFrame=cf})
				a:Play()
				 --a.Completed:Wait()
				-- print('Teleporting Done!')
			end
		end
		bypass_teleport(Island)
	end)
end

-- NOCLIP

local NoClipHandler -- Store the event handler in a variable

-- Store the original collision state of the parts
local originalCollisionState = {
    UpperTorso = true,
    LowerTorso = true,
    Head = true,
    HumanoidRootPart = true,
}

function NoClip()
    NoClipHandler = game:GetService("RunService").Stepped:Connect(function()
        local Player = game:GetService("Players").LocalPlayer
        local Character = Player.Character
        if Character then
            Character.UpperTorso.CanCollide = not getgenv().NoClip
            Character.LowerTorso.CanCollide = not getgenv().NoClip
            Character.Head.CanCollide = not getgenv().NoClip
            Character.HumanoidRootPart.CanCollide = not getgenv().NoClip
        end
    end)
end

function StopNoClip()
    if NoClipHandler then
        NoClipHandler:Disconnect() -- Disconnect the Stepped event handler
        -- Restore the original collision state of the parts
        local Player = game:GetService("Players").LocalPlayer
        local Character = Player.Character
        if Character then
            Character.UpperTorso.CanCollide = originalCollisionState.UpperTorso
            Character.LowerTorso.CanCollide = originalCollisionState.LowerTorso
            Character.Head.CanCollide = originalCollisionState.Head
            Character.HumanoidRootPart.CanCollide = originalCollisionState.HumanoidRootPart
        end
    end
end

-- MOVESTACKS

function SunaStack() 
	spawn(function()
		while getgenv().SunaStack do
			task.wait()
			local args = {
				[1] = "Desert Spada",
				[2] = {
				["cf"] = CFrame.new(-3694.07275, 15.0927734, 138.661896, 0.999832332, -0.000389953493, 0.0183105897, -0, 0.999773383, 0.0212917831, -0.0183147416, -0.0212882124, 0.999605656)
			}
			}
			game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))
		end
	end)
end

function SunaRelease()
	if getgenv().SunaStack == true then
	local args = {
		[1] = CFrame.new(-3688.59082, 18.1677742, 423.727539, 0.998908818, -3.40270361e-07, 0.046702411, 2.04845273e-05, 0.999999881, -0.00043085363, -0.0467024073, 0.000431340188, 0.998908758)
	 }
		
	 game:GetService("ReplicatedStorage"):WaitForChild("PlayerRemotes"):WaitForChild(game.Players.LocalPlayer.Name.."|ServerScriptService.Skills.Skills.SkillContainer.Suna-Suna.Desert Spada"):FireServer(unpack(args))
	end
end

--SERVER HOP

function NormalServerHop()
	local Player = game.Players.LocalPlayer    
	local Http = game:GetService("HttpService")
	local TPS = game:GetService("TeleportService")
	local Api = "https://games.roblox.com/v1/games/"

	local _place,_id = game.PlaceId, game.JobId
	local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
	function ListServers(cursor)
	local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
	return Http:JSONDecode(Raw)
	end

	local Next; repeat
	local Servers = ListServers(Next)
	for i,v in next, Servers.data do
		if v.playing < v.maxPlayers and v.id ~= _id then
			local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
			if s then break end
		end
	end
	
	Next = Servers.nextPageCursor
	until not Next
end

function LowServerHop()
	local Http = game:GetService("HttpService")
	local TPS = game:GetService("TeleportService")
	local Api = "https://games.roblox.com/v1/games/"

	local _place = game.PlaceId
	local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
	function ListServers(cursor)
	local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
	return Http:JSONDecode(Raw)
	end

	local Server, Next; repeat
	local Servers = ListServers(Next)
	Server = Servers.data[1]
	Next = Servers.nextPageCursor
	until Server

	TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
end

--

--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI

local ClyHubUI = loadstring(game:HttpGet('https://raw.githubusercontent.com/onclycly/ui-source/main/loadstring'))()

local function getKeyFromPastebin(link)
    local key = game:HttpGet(link)
    return key
end

local Window = ClyHubUI:CreateWindow({
	Name = "Cly Hub",
	LoadingTitle = "Grand Piece Online",
	LoadingSubtitle = "By Clycly",
	ConfigurationSaving = {
		Enabled = false,
		FolderName = "Cly Hub Config",
		FileName = "Cly Hub"
	},
	KeySystem = true, -- Set this to true to use their key system
	KeySettings = {
		Title = "Cly Hub Login",
		Subtitle = "Enter Key",
		Note = "Invalid Key? PM",
		SaveKey = true,
		Key = getKeyFromPastebin("https://pastebin.com/raw/h09XGjK8")
	}
})

-- Rayfield:Notify("Welcome", "Content/Description Example", 4483362458) -- Notfication -- Title, Content, Image

-- LOCAL PLAYER TAB

local LocalPlayerTab = Window:CreateTab("Local Player") -- Title, Image

-- PLAYER SECTION

local LocalPlayerSection = LocalPlayerTab:CreateSection("Player")

local NoClipToggle = LocalPlayerTab:CreateToggle({
	Name = "No-clip",
	CurrentValue = false,
	Flag = "NoClipToggle",
	Callback = function (Value)
		getgenv().NoClip = Value

		if Value then
			NoClip()
		else
			StopNoClip()
		end
	end
})

-- MOVESTACK SECTION

local MovestackSection = LocalPlayerTab:CreateSection("Movestacks")

local SunaXStackToggle = LocalPlayerTab:CreateToggle({
	Name = "Suna X Stack",
	CurrentValue = false,
	Flag = "SunaXToggle",
	Callback = function (Value)
		getgenv().SunaStack = Value
		if Value then 
			SunaStack()
		end
	end
})

local SunaReleaseButton = LocalPlayerTab:CreateButton({
	Name = "Suna X Release",
	Callback = function ()
		SunaRelease()
	end
})

-- SERVERS TAB

local ServersTab = Window:CreateTab("Server")

local LowServerHopEnabled = false

local ServerHopButton = ServersTab:CreateButton({
	Name = "Server Hop",
	Callback = function ()
		if LowServerHopEnabled then
            -- If LowServerToggle is active (true), do something specific to that case.
            LowServerHop()
        else
            -- If LowServerToggle is not active (false), do the default server hop.
            NormalServerHop()
        end
	end
})

local LowServerToggle = ServersTab:CreateToggle({
	Name = "Hop To Server w/ Low Players",
	CurrentValue = false,
	Flag = "LowServerToggle",
	Callback = function (Value)
		LowServerHopEnabled = Value
	end
})

-- TELEPORTS TAB

local TeleportsTab = Window:CreateTab("Teleport")

local TPSpeed = 3

-- ISLAND SECTION

local TeleportIslandSection = TeleportsTab:CreateSection("Teleport to Island")

local TPSpeedSlider = TeleportsTab:CreateSlider({
	Name = "Teleport Speed",
	Range = {0,10},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = 0,
	Flag = "TeleportSpeedSlider",
	Callback = function (Value)
		TPSpeed = Value
	end
})

local teleport_table = {
	TownOfBeginnings = Vector3.new(965.000061, 7.99998617, 1194.25), -- your desired position
}


local IslandTeleportDropdown = TeleportsTab:CreateDropdown({
	Name = "Select Island",
	Options = {"Town Of Beginnings","Shandora"},
	CurrentOption = "None Selected",
	Flag = "IslandTeleport", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
		
		TeleportIsland(teleport_table.TownOfBeginnings,2)

	end,
})

-- SETTINGS TAB

local SettingsTab = Window:CreateTab("Settings")

local ConfigSection = SettingsTab:CreateSection("Misc")

local FPSSlider = SettingsTab:CreateSlider({
	Name = "FPS Cap",
	Range = {0, 144},
	Increment = 1,
	Suffix = "Frames Per Second",
	CurrentValue = 0,
	Flag = "FPSCapSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		setfpscap(Value)
	end,
})

-- KEYBINDS SECTION

local KeybindsSection = SettingsTab:CreateSection("Keybinds")

local SunaStackKeybind = SettingsTab:CreateKeybind({
	Name = "Suna X Stack Keybind",
	CurrentKeybind = "H",
	HoldToInteract = false,
	Flag = "SunaXKeybind",
	Callback = function (Keybind)
		SunaXStackToggle:Set(not SunaXStackToggle.CurrentValue)
	end
})

local SunaReleaseKeybind = SettingsTab:CreateKeybind({
	Name = "Suna X Release Keybind",
	CurrentKeybind = "G",
	HoldToInteract = false,
	Flag = "SunaReleaseKeybind",
	Callback = function (Keybind)
		SunaRelease()
	end
})

-- local Button = LocalPlayerTab:CreateButton({
-- 	Name = "Button Example",
-- 	Callback = function()
-- 		-- The function that takes place when the button is pressed
-- 	end,
-- })

-- local Toggle = Tab:CreateToggle({
-- 	Name = "Toggle Example",
-- 	CurrentValue = false,
-- 	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Value)
-- 		-- The function that takes place when the toggle is pressed
--     		-- The variable (Value) is a boolean on whether the toggle is true or false
-- 	end,
-- })

-- local Slider = Tab:CreateSlider({
-- 	Name = "Slider Example",
-- 	Range = {0, 100},
-- 	Increment = 10,
-- 	Suffix = "Bananas",
-- 	CurrentValue = 10,
-- 	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Value)
-- 		-- The function that takes place when the slider changes
--     		-- The variable (Value) is a number which correlates to the value the slider is currently at
-- 	end,
-- })

-- local Label = Tab:CreateLabel("Label Example")

-- local Paragraph = Tab:CreateParagraph({Title = "Paragraph Example", Content = "Paragraph Example"})

-- local Input = Tab:CreateInput({
-- 	Name = "Input Example",
-- 	PlaceholderText = "Input Placeholder",
-- 	RemoveTextAfterFocusLost = false,
-- 	Callback = function(Text)
-- 		-- The function that takes place when the input is changed
--     		-- The variable (Text) is a string for the value in the text box
-- 	end,
-- })

-- local Keybind = Tab:CreateKeybind({
-- 	Name = "Keybind Example",
-- 	CurrentKeybind = "Q",
-- 	HoldToInteract = false,
-- 	Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Keybind)
-- 		-- The function that takes place when the keybind is pressed
--     		-- The variable (Keybind) is a boolean for whether the keybind is being held or not (HoldToInteract needs to be true)
-- 	end,
-- })

-- local Dropdown = Tab:CreateDropdown({
-- 	Name = "Dropdown Example",
-- 	Options = {"Option 1","Option 2"},
-- 	CurrentOption = "Option 1",
-- 	Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Option)
-- 	  	  -- The function that takes place when the selected option is changed
--     	  -- The variable (Option) is a string for the value that the dropdown was changed to
-- 	end,
-- })

-- local Button = Tab:CreateButton({
-- 	Name = "Destroy UI",
-- 	Callback = function()
-- 		Rayfield:Destroy()
-- 	end,
-- })

-- Extras

-- getgenv().SecureMode = true -- Only Set To True If Games Are Detecting/Crashing The UI

-- Rayfield:Destroy() -- Destroys UI

-- Rayfield:LoadConfiguration() -- Enables Configuration Saving

-- Section:Set("Section Example") -- Use To Update Section Text

-- Button:Set("Button Example") -- Use To Update Button Text

-- Toggle:Set(false) -- Use To Update Toggle

-- Slider:Set(10) -- Use To Update Slider Value

-- Label:Set("Label Example") -- Use To Update Label Text

-- Paragraph:Set({Title = "Paragraph Example", Content = "Paragraph Example"}) -- Use To Update Paragraph Text

-- Keybind:Set("RightCtrl") -- Keybind (string) -- Use To Update Keybind

-- Dropdown:Set("Option 2") -- The new option value -- Use To Update/Set New Dropdowns
