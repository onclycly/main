
--- VARIABLES

getgenv().SunaStack = false
getgenv().NoClip = false
getgenv().AutoTweenChests = false

--- FUNCTIONS

-- WHITE SCREEN

function WhiteScreen(reducecpu)
	spawn(function ()
		game:GetService('RunService'):Set3dRenderingEnabled(reducecpu)	
	end)
end

-- ANTI AFK

function AntiAFK ()
	spawn (function ()
		game:GetService("Players").LocalPlayer.Idled:connect(
   	 	function()
        game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(1)
        game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    	end
		)
	end)
end

-- FOV CHANGER

function FovChanger(FOV)
	spawn(function ()
		local FovNumber = FOV
		local Camera = workspace.CurrentCamera
		Camera.FieldOfView = FovNumber
	end)
end

-- TELEPORT

-- INSTANT TP TO FISHMAN

function InstantTPFishman()
	spawn(function ()
		local teleport_table = {
			location = Vector3.new(5639.86865, -92.7621536, -16611.4688),
		}

		local tween_s = game:GetService('TweenService')
		local tweeninfo = TweenInfo.new(1,Enum.EasingStyle.Linear)

		local lp = game.Players.LocalPlayer

		function bypass_teleport(v)
			if lp.Character and
			lp.Character:FindFirstChild('HumanoidRootPart') then
				local cf = CFrame.new(v)
				local a = tween_s:Create(lp.Character.HumanoidRootPart,tweeninfo,{CFrame=cf})
				a:Play()
				-- a.Completed:Wait()	
			end
		end

		bypass_teleport(teleport_table.location)
	end)
end

-- TELELPORT ISLAND

local tween
local isTeleporting = false

local function TeleportIsland(Island, Speed)
    local lp = game.Players.LocalPlayer
    local humanoidRootPart = lp.Character and lp.Character:FindFirstChild('HumanoidRootPart')
    if not humanoidRootPart then
        return  -- Exit the function if the character is not present
    end

    local characterRemovingConnection
    local function onCharacterRemoving()
        -- Character is being removed (died), stop the tween and disconnect the event
        if tween then
            tween:Cancel()
        end
        if characterRemovingConnection then
            characterRemovingConnection:Disconnect()
        end
    end

    characterRemovingConnection = lp.CharacterRemoving:Connect(onCharacterRemoving)

    local targetPos = Island
    local startPos = humanoidRootPart.Position
    local direction = (targetPos - startPos).unit
    local distance = (targetPos - startPos).Magnitude
    local timeToTeleport = distance / Speed

    --tween = game:GetService("TweenService"):Create(humanoidRootPart, TweenInfo.new(timeToTeleport), {CFrame = CFrame.new(targetPos)})
	tween = game:GetService("TweenService"):Create(humanoidRootPart, TweenInfo.new(timeToTeleport, Enum.EasingStyle.Linear), {CFrame = CFrame.new(targetPos)})
    tween:Play()
	isTeleporting = true

    tween.Completed:Connect(function()
        if humanoidRootPart.Parent then
            humanoidRootPart.CFrame = CFrame.new(targetPos)
        end

        -- Character has reached the destination or died, disconnect the event
        if characterRemovingConnection then
            characterRemovingConnection:Disconnect()
        end
    end)
end

-- AUTO COLLECT CHESTS

function AutoCollectChest()
	spawn (function ()
				local ChestPart = "Part"  -- Change this to the name of your specific part

				for _, v in pairs(workspace:GetDescendants()) do
					if v:IsA("Part") and v.Name == ChestPart then
						local clickDetector = v:FindFirstChild("ClickDetector")
						if clickDetector then
							fireclickdetector(clickDetector, 1)
							isTeleporting = false
						end
					end
				end
	end)
end

-- AUTO TWEEN TO CHESTS

local specificPartName = "Part"  -- Change this to the name of your specific part
local proximityThreshold = 6  -- Adjust this threshold as needed


function TweenToChests()
    spawn(function()
        local function checkForPart()
            local envFolder = workspace:FindFirstChild("Env")
            if not envFolder then
                print("Env folder not found in workspace.")
                return
            end

            local partFound = false
			local plyr = game.Players.LocalPlayer
            local playerPosition = plyr.Character and plyr.Character:FindFirstChild("HumanoidRootPart") and plyr.Character.HumanoidRootPart.Position

            for _, v in pairs(envFolder:GetDescendants()) do
                if v.Name == specificPartName then
                    partFound = true
					local distance = (v.Position - playerPosition).Magnitude
					if distance <= proximityThreshold then
						AutoCollectChest()
					end

					if isTeleporting then
						print('going to chest')
					else
						TeleportIsland(v.Position,20)
					end

                    break
                end
            end

            if partFound then
                print("The part is in the 'Env' folder.")
            else
                print("The part is not in the 'Env' folder.")
            end
        end

        -- Initial check and continuous checking with a wait
        checkForPart()

        while getgenv().AutoTweenChests do
            wait(1)  -- Adjust the wait time as needed
            checkForPart()
        end
    end)
end

-- if plyr.character ~= v.Position then
-- 	TeleportIsland(v.Position,10)  -- Trigger the slower tween to teleport to the found part
-- 	end

-- NOCLIP

local NoClipHandler -- Store the event handler in a variable

-- Store the original collision state of the parts
local originalCollisionState = {
    UpperTorso = true,
    LowerTorso = true,
    Head = true,
    HumanoidRootPart = true,
}

function NoClip()
    NoClipHandler = game:GetService("RunService").Stepped:Connect(function()
        local Player = game:GetService("Players").LocalPlayer
        local Character = Player.Character
        if Character then
            Character.UpperTorso.CanCollide = not getgenv().NoClip
            Character.LowerTorso.CanCollide = not getgenv().NoClip
            Character.Head.CanCollide = not getgenv().NoClip
            Character.HumanoidRootPart.CanCollide = not getgenv().NoClip
        end
    end)
end

function StopNoClip()
    if NoClipHandler then
        NoClipHandler:Disconnect() -- Disconnect the Stepped event handler
        -- Restore the original collision state of the parts
        local Player = game:GetService("Players").LocalPlayer
        local Character = Player.Character
        if Character then
            Character.UpperTorso.CanCollide = originalCollisionState.UpperTorso
            Character.LowerTorso.CanCollide = originalCollisionState.LowerTorso
            Character.Head.CanCollide = originalCollisionState.Head
            Character.HumanoidRootPart.CanCollide = originalCollisionState.HumanoidRootPart
        end
    end
end

-- MOVESTACKS

function SunaStack()
	spawn(function()
		while getgenv().SunaStack do
			task.wait()
			local args = {
				[1] = "Desert Spada",
				[2] = {
				["cf"] = CFrame.new(-3694.07275, 15.0927734, 138.661896, 0.999832332, -0.000389953493, 0.0183105897, -0, 0.999773383, 0.0212917831, -0.0183147416, -0.0212882124, 0.999605656)
			}
			}
			game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Skill"):InvokeServer(unpack(args))
		end
	end)
end

function SunaRelease()
	local args = {
		[1] = CFrame.new(-3688.59082, 18.1677742, 423.727539, 0.998908818, -3.40270361e-07, 0.046702411, 2.04845273e-05, 0.999999881, -0.00043085363, -0.0467024073, 0.000431340188, 0.998908758)
	 }

	 game:GetService("ReplicatedStorage"):WaitForChild("PlayerRemotes"):WaitForChild(game.Players.LocalPlayer.Name.."|ServerScriptService.Skills.Skills.SkillContainer.Suna-Suna.Desert Spada"):FireServer(unpack(args))
end

--SERVER HOP

function NormalServerHop()
	local Player = game.Players.LocalPlayer
	local Http = game:GetService("HttpService")
	local TPS = game:GetService("TeleportService")
	local Api = "https://games.roblox.com/v1/games/"

	local _place,_id = game.PlaceId, game.JobId
	local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
	function ListServers(cursor)
	local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
	return Http:JSONDecode(Raw)
	end

	local Next; repeat
	local Servers = ListServers(Next)
	for i,v in next, Servers.data do
		if v.playing < v.maxPlayers and v.id ~= _id then
			local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
			if s then break end
		end
	end

	Next = Servers.nextPageCursor
	until not Next
end

function LowServerHop()
	local Http = game:GetService("HttpService")
	local TPS = game:GetService("TeleportService")
	local Api = "https://games.roblox.com/v1/games/"

	local _place = game.PlaceId
	local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
	function ListServers(cursor)
	local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
	return Http:JSONDecode(Raw)
	end

	local Server, Next; repeat
	local Servers = ListServers(Next)
	Server = Servers.data[1]
	Next = Servers.nextPageCursor
	until Server

	TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
end

--

--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI
--- GUI

local ClyHubUI = loadstring(game:HttpGet('https://raw.githubusercontent.com/onclycly/ui-source/main/loadstring'))()


local function getKeyFromPastebin(link)
    local key = game:HttpGet(link)
    return key
end

	-- CHECKS WHO IS LOGGED IN

	local userName

	local JaredHWID = "2A98BE20-F47D-4AEB-B4A3-74F3A9761D6F"

	local ClyHWID = "ACA2171F-6764-4C31-A41F-98339CE3AB69"

	local RonaldHWID = "FECDC993-8EBD-4DA9-A30F-B391E889FC94"

	local HWID = game:GetService("RbxAnalyticsService"):GetClientId()

	if HWID == JaredHWID then
		userName = "Jared"
	elseif HWID == ClyHWID then
		userName = "Cly"
	elseif HWID == RonaldHWID then
		userName = "Ronald"
	else
		userName = "Unknown"
	end

	-- CREATE WINDOW

local Window = ClyHubUI:CreateWindow({
	Name = "Cly Hub | ".. "Logged in : ".. userName,
	LoadingTitle = "Grand Piece Online",
	LoadingSubtitle = "By Clycly",
	ConfigurationSaving = {
		Enabled = false,
		FolderName = "Cly Hub Config",
		FileName = "Cly Hub"
	},
	KeySystem = true, -- Set this to true to use their key system
	KeySettings = {
		Title = "Cly Hub Login",
		Subtitle = "Enter Key",
		Note = "Invalid Key? Baka Nigger ka",
		SaveKey = true,
		Key = getKeyFromPastebin("https://pastebin.com/raw/h09XGjK8")
	}
})

-- Rayfield:Notify("Welcome", "Content/Description Example", 4483362458) -- Notfication -- Title, Content, Image

-- LOCAL PLAYER TAB

local LocalPlayerTab = Window:CreateTab("Local Player") -- Title, Image

-- CHEST COUNTER

local chestStatus

if userName == "Jared" then
	chestStatus = "Unpaid"
elseif userName == "Cly" then
	chestStatus = "Owner"
elseif userName == "Ronald" then
	chestStatus = "Unpaid"
else
	chestStatus = "Unknown"
end

local chestCountLabel = LocalPlayerTab:CreateLabel("Status : ".. chestStatus)

-- PLAYER SECTION

local LocalPlayerSection = LocalPlayerTab:CreateSection("Player")

local NoClipToggle = LocalPlayerTab:CreateToggle({
	Name = "No-clip",
	CurrentValue = false,
	Flag = "NoClipToggle",
	Callback = function (Value)
		getgenv().NoClip = Value
		if Value then
			NoClip()
		else
			StopNoClip()
		end
	end
})


-- MOVESTACKS SECTION

local MovestacksSection = LocalPlayerTab:CreateSection("Movestacks")

local SunaXStackToggle = LocalPlayerTab:CreateToggle({
	Name = "Suna X Stack",
	CurrentValue = false,
	Flag = "SunaXToggle",
	Callback = function (Value)
		getgenv().SunaStack = Value
		if Value then
			SunaStack()
		end
	end
})

local SunaReleaseButton = LocalPlayerTab:CreateButton({
	Name = "Suna X Release",
	Callback = function ()
		SunaRelease()
	end
})

-- SERVERS TAB

local ServersTab = Window:CreateTab("Server")

local LowServerHopEnabled = false

local ServerHopButton = ServersTab:CreateButton({
	Name = "Server Hop",
	Callback = function ()
		if LowServerHopEnabled then
            -- If LowServerToggle is active (true), do something specific to that case.
            LowServerHop()
        else
            -- If LowServerToggle is not active (false), do the default server hop.
            NormalServerHop()
        end
	end
})

local LowServerToggle = ServersTab:CreateToggle({
	Name = "Hop To Server w/ Low Players",
	CurrentValue = false,
	Flag = "LowServerToggle",
	Callback = function (Value)
		LowServerHopEnabled = Value
	end
})

-- AUTO FARM TAB

local AutoFarmTab = Window:CreateTab("Farm")

-- AUTO PELI SECTION

local AntiAFKButton = AutoFarmTab:CreateButton({
	Name = "Anti AFK",
	Callback = function ()
		AntiAFK()
	end
})


local AutoPeliSection = AutoFarmTab:CreateSection("Auto Peli")

local AutoPeliLabel = AutoFarmTab:CreateLabel("Auto Farms Chests on Starter Island")

local AutoPeliToggle = AutoFarmTab:CreateToggle({
	Name = "Auto Peli",
	CurrentValue = false,
	Flag = "AutoPeliToggle",
	Callback = function (Value)
		getgenv().AutoTweenChests = Value
		if Value then
			TweenToChests()
		end
	end
})

-- VISUALS TAB

local VisualsTab = Window:CreateTab("Visuals")


-- REDUCE CPU USAGE SECTION

local ReduceCPUUsageSection = VisualsTab:CreateSection("Reduce CPU Usage")

local WhiteScreenToggle = VisualsTab:CreateToggle({
    Name = "Disable 3D Rendering (Only When Window Is Not Focused)",
    CurrentValue = false,
    Flag = "WhiteScreenToggle",
    Callback = function (Value)
		while Value do
			if iswindowactive() then
				print('window active no white screen')
				WhiteScreen(true)
			else 
				WhiteScreen(not Value)
			end
			wait(2)
		end
    end
})

-- FOV SECTION

local FOVChangeSection = VisualsTab:CreateSection("FOV Changer")

local FOVValue = 70

local FOVSlider = VisualsTab:CreateSlider({
	Name = "Unlock FOV",
	Range = {0,120},
	Increment = 10,
	Suffix = "Field Of View",
	CurrentValue = 70,
	Flag = "FOVSlider",
	Callback = function (Value)
		FOVValue = Value
		FovChanger(FOVValue)
	end
})

-- TELEPORTS TAB

local TeleportsTab = Window:CreateTab("Teleport")

local TPSpeed = 35

local TPIsland = "None Selected"

-- TELEPORT SETTINGS SECTION

local TeleportSettingsSection = TeleportsTab:CreateSection("Settings")

local TPSpeedSlider = TeleportsTab:CreateSlider({
	Name = "Teleport Speed",
	Range = {0,100},
	Increment = 1,
	Suffix = "Speed",
	CurrentValue = TPSpeed,
	Flag = "TeleportSpeedSlider",
	Callback = function (Value)
		TPSpeed = Value
	end
})

local CancelTPButton = TeleportsTab:CreateButton({
	Name = "Cancel Teleport",
	Callback = function ()
		tween:Cancel()
	end
})

-- ISLAND SECTION

local TeleportIslandSection = TeleportsTab:CreateSection("Teleport to Island")

local InstantTeleportFishman = TeleportsTab:CreateButton({
	Name = "Instant TP To Fishman Island",
	Callback = function ()
		InstantTPFishman()
	end
})

local teleport_table = {
	["Town Of Beginnings"] = Vector3.new(965.000061, 7.99998617, 1194.25), -- your desired position
	["Sandora"] = Vector3.new(-1316.08899, 9.88485718, 1129.94995),
	["World Scroll"] = Vector3.new(-12185.5, 3.27369881, -18546),
	["Reverse Mountain"] = Vector3.new(-14338, 18.7268486, -9446),
	["Cafe"] = Vector3.new(8456.7334, 68.7727356, 10512.8535),
	["Factory Suna Spot"] = Vector3.new(8532.37598, 447.789124, 11679.8857),

}


local IslandTeleportDropdown = TeleportsTab:CreateDropdown({
	Name = "Select Island",
	Options = {
	"Factory Suna Spot",
	"Town Of Beginnings",
	"Sandora",
	"Reverse Mountain",
	"World Scroll",
	"Cafe"},
	CurrentOption = "None Selected",
	Flag = "IslandTeleport", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
		TPIsland = Option[1]
	end,
})

local TeleportIslandButton = TeleportsTab:CreateButton({
	Name = "Teleport To Selected Island",
	Callback = function ()
		if TPIsland == "None Selected" then
            print("Please select an island from the dropdown.")
        else
            local destination = teleport_table[TPIsland]
            if destination then
                TeleportIsland(destination, TPSpeed)
            else
                print("Destination not found")
            end
        end
	end
})

-- SETTINGS TAB

local SettingsTab = Window:CreateTab("Settings")

local CloseLabel = SettingsTab:CreateLabel("F5 To Close/Open UI")

local ConfigSection = SettingsTab:CreateSection("Misc")

local FPSSlider = SettingsTab:CreateSlider({
	Name = "FPS Cap",
	Range = {0, 144},
	Increment = 1,
	Suffix = "Frames Per Second",
	CurrentValue = 0,
	Flag = "FPSCapSlider", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		setfpscap(Value)
	end,
})

-- KEYBINDS SECTION

local KeybindsSection = SettingsTab:CreateSection("Keybinds")

local NoClipBind = SettingsTab:CreateKeybind({
	Name = "No Clip Keybind",
	CurrentKeybind = "L",
	HoldToInteract = false,
	Flag = "NoClipKeybind",
	Callback = function ()
		NoClipToggle:Set(not NoClipToggle.CurrentValue)
	end
})

local SunaStackKeybind = SettingsTab:CreateKeybind({
	Name = "Suna X Stack Keybind",
	CurrentKeybind = "H",
	HoldToInteract = false,
	Flag = "SunaXKeybind",
	Callback = function (Keybind)
		SunaXStackToggle:Set(not SunaXStackToggle.CurrentValue)
	end
})

local SunaReleaseKeybind = SettingsTab:CreateKeybind({
	Name = "Suna X Release Keybind",
	CurrentKeybind = "G",
	HoldToInteract = false,
	Flag = "SunaReleaseKeybind",
	Callback = function (Keybind)
		SunaRelease()
	end
})

local PrintKeybind = SettingsTab:CreateKeybind({
	Name = "Print",
	CurrentKeybind = "T",
	HoldToInteract = false,
	Flag = "Keybindss",
	Callback = function ()
		print(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
	end
})


-- local Button = LocalPlayerTab:CreateButton({
-- 	Name = "Button Example",
-- 	Callback = function()
-- 		-- The function that takes place when the button is pressed
-- 	end,
-- })

-- local Toggle = Tab:CreateToggle({
-- 	Name = "Toggle Example",
-- 	CurrentValue = false,
-- 	Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Value)
-- 		-- The function that takes place when the toggle is pressed
--     		-- The variable (Value) is a boolean on whether the toggle is true or false
-- 	end,
-- })

-- local Slider = Tab:CreateSlider({
-- 	Name = "Slider Example",
-- 	Range = {0, 100},
-- 	Increment = 10,
-- 	Suffix = "Bananas",
-- 	CurrentValue = 10,
-- 	Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Value)
-- 		-- The function that takes place when the slider changes
--     		-- The variable (Value) is a number which correlates to the value the slider is currently at
-- 	end,
-- })

-- local Label = Tab:CreateLabel("Label Example")

-- local Paragraph = Tab:CreateParagraph({Title = "Paragraph Example", Content = "Paragraph Example"})

-- local Input = Tab:CreateInput({
-- 	Name = "Input Example",
-- 	PlaceholderText = "Input Placeholder",
-- 	RemoveTextAfterFocusLost = false,
-- 	Callback = function(Text)
-- 		-- The function that takes place when the input is changed
--     		-- The variable (Text) is a string for the value in the text box
-- 	end,
-- })

-- local Keybind = Tab:CreateKeybind({
-- 	Name = "Keybind Example",
-- 	CurrentKeybind = "Q",
-- 	HoldToInteract = false,
-- 	Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Keybind)
-- 		-- The function that takes place when the keybind is pressed
--     		-- The variable (Keybind) is a boolean for whether the keybind is being held or not (HoldToInteract needs to be true)
-- 	end,
-- })

-- local Dropdown = Tab:CreateDropdown({
-- 	Name = "Dropdown Example",
-- 	Options = {"Option 1","Option 2"},
-- 	CurrentOption = "Option 1",
-- 	Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
-- 	Callback = function(Option)
-- 	  	  -- The function that takes place when the selected option is changed
--     	  -- The variable (Option) is a string for the value that the dropdown was changed to
-- 	end,
-- })

-- local Button = Tab:CreateButton({
-- 	Name = "Destroy UI",
-- 	Callback = function()
-- 		Rayfield:Destroy()
-- 	end,
-- })

-- Extras

-- getgenv().SecureMode = true -- Only Set To True If Games Are Detecting/Crashing The UI

-- Rayfield:Destroy() -- Destroys UI

-- Rayfield:LoadConfiguration() -- Enables Configuration Saving

-- Section:Set("Section Example") -- Use To Update Section Text

-- Button:Set("Button Example") -- Use To Update Button Text

-- Toggle:Set(false) -- Use To Update Toggle

-- Slider:Set(10) -- Use To Update Slider Value

-- Label:Set("Label Example") -- Use To Update Label Text

-- Paragraph:Set({Title = "Paragraph Example", Content = "Paragraph Example"}) -- Use To Update Paragraph Text

-- Keybind:Set("RightCtrl") -- Keybind (string) -- Use To Update Keybind

-- Dropdown:Set("Option 2") -- The new option value -- Use To Update/Set New Dropdowns
